// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  // output          = "../../../node_modules/.prisma/client"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum UserStatus {
  INVITED
  ACTIVE
  DELETED
  BLOCKED
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id               String            @id @default(cuid())
  /// @zod.email({ message: "Invalid email address" })
  email            String            @unique
  name             String?
  profilePicture   String?           @db.VarChar(1024)
  profileSlug      String
  UserStatus       UserStatus        @default(ACTIVE)
  role             UserRole          @default(USER)
  createdAt        DateTime          @default(now())
  modifiedAt       DateTime          @default(now())
  Post             Post[]
  PostViews        PostView[]
  ReactedOnPosts   PostReaction[]
  Session          Session[]
  Following        Follower[]        @relation("following")
  FollowedBy       Follower[]        @relation("followedBy")
  Comments         Comment[]
  Mentions         Mention[]
  CommentReactions CommentReaction[]
  Watchlist        Watchlist[]
}

model Follower {
  id               String @id
  followedByUserId String @map("followedById")
  FollowingUser    User   @relation(fields: [followedByUserId], references: [id], name: "followedBy")
  followingUserId  String @map("followerId")
  Follower         User   @relation(fields: [followingUserId], references: [id], name: "following")

  @@unique([followedByUserId, followingUserId])
}

model Post {
  id            String         @id @default(cuid())
  title         String
  slug          String         @unique
  createdById   String
  createdAt     DateTime       @default(now())
  modifiedAt    DateTime       @default(now())
  CreatedBy     User           @relation(fields: [createdById], references: [id])
  Source        Source         @relation(fields: [sourceId], references: [id])
  sourceId      String
  previewUrl    String
  description   String         @db.MediumText
  PostReactions PostReaction[]
  PostComments  Comment[]
  VideoSources  VideoSource[]
  Watchlist     Watchlist[]
}

model VideoSource {
  id     String @id @default(uuid())
  postId String
  type   String
  url    String
  Post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Source {
  id          String       @id @default(cuid())
  name        String       @unique
  url         String
  Post        Post[]
  SourceLogos SourceLogo[]
}

model SourceLogo {
  id       String  @id @default(uuid())
  sourceId String
  type     String
  url      String
  size     String?
  Source   Source  @relation(fields: [sourceId], references: [id], onDelete: Cascade)
}

model PostView {
  id       String   @id @default(cuid())
  viewedBy String   @map("userId")
  viewedAt DateTime @default(now())
  ViewedBy User     @relation(fields: [viewedBy], references: [id], onDelete: Cascade)
}

enum PostReactionTypes {
  LIKE
  DISLIKE
}

model PostReaction {
  id        String            @id @default(cuid())
  postId    String
  Post      Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
  reaction  PostReactionTypes @default(LIKE)
  reactedBy String            @map("userId")
  viewedAt  DateTime          @default(now())
  ReactedBy User              @relation(fields: [reactedBy], references: [id], onDelete: Cascade)

  @@unique([postId, reactedBy])
}

enum WatchReason {
  MANUAL
  COMMENTED
  MENTIONED
  CREATED
}

model Watchlist {
  id          Int         @id @default(autoincrement())
  userId      String
  postId      String?
  commentId   String?
  watchReason WatchReason
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post        Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  Comment     Comment?    @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([postId])
}

model Session {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  User           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime
}

model Comment {
  id               String            @id @default(cuid())
  parentCommentId  String?
  ParentComment    Comment?          @relation("ParentComment", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ReplyComments    Comment[]         @relation("ParentComment")
  postId           String
  isEdited         Boolean           @default(false)
  comment          Json
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  createdById      String
  CreatedBy        User              @relation(fields: [createdById], references: [id], onDelete: Cascade)
  Post             Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
  Mentions         Mention[]
  Watchlist        Watchlist[]
  CommentReactions CommentReaction[]
}

model Mention {
  id        String  @id @default(uuid())
  commentId String
  userId    String
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

enum CommentReactionTypes {
  LIKE
  DISLIKE
  LAUGH
  HURRAY
  CONFUSED
  LOVE
  ROCKET
  EYES
}

model CommentReaction {
  id        String               @id @default(cuid())
  commentId String
  Comment   Comment              @relation(fields: [commentId], references: [id], onDelete: Cascade)
  reaction  CommentReactionTypes @default(LIKE)
  reactedBy String               @map("userId")
  viewedAt  DateTime             @default(now())
  ReactedBy User                 @relation(fields: [reactedBy], references: [id], onDelete: Cascade)

  @@unique([commentId, reactedBy])
}

model NotionSourceSeedLog {
  id           Int      @id @default(autoincrement())
  notionPageId String
  itemId       String
  itemType     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}
